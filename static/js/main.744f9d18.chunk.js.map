{"version":3,"sources":["components/ToDoList.tsx","components/atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoListTwo.tsx","App.tsx","index.tsx","theme.ts"],"names":["ToDoList","Categories","useForm","defaultValues","email","register","handleSubmit","errors","formState","setError","setValue","Helmet","style","display","flexDirection","onSubmit","data","password","password1","message","shouldFocus","required","pattern","value","placeholder","validate","noYoungmin","includes","noPark","firstName","lastName","minLength","username","extraError","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","text","id","Date","now","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","ToDoListTwo","useRecoilState","setCategory","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.744f9d18.chunk.js","sourcesContent":["import { Helmet } from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\n\ninterface IForm {\n  email: string;\n  firstName: string;\n  lastName: string;\n  username: string;\n  password: string;\n  password1: string;\n  extraError?: string;\n  toDo: string;\n}\n\nfunction ToDoList() {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n    setValue,\n  } = useForm<IForm>({\n    defaultValues: {\n      email: \"@naver.com\",\n    },\n  });\n  const onValid = (data: IForm) => {\n    if (data.password !== data.password1) {\n      setError(\n        \"password1\",\n        { message: \"Password are not the same\" },\n        { shouldFocus: true }\n      );\n      setValue(\"password1\", \"\");\n    }\n    //setError(\"extraError\", { message: \"Server Offline\" });\n  };\n\n  return (\n    <div>\n      <Helmet>\n        <title>To Dos</title>\n      </Helmet>\n      <h1>To Dos</h1>\n      <hr />\n      <form\n        style={{ display: \"flex\", flexDirection: \"column\" }}\n        onSubmit={handleSubmit(onValid)}\n      >\n        <input\n          {...register(\"email\", {\n            required: \"Email is required\",\n            pattern: {\n              value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n              message: \"Only naver.com emails allowed\",\n            },\n          })}\n          placeholder=\"Email\"\n        />\n        <span>{errors?.email?.message}</span>\n        <input\n          {...register(\"firstName\", {\n            required: \"write here\",\n            validate: {\n              noYoungmin: (value) =>\n                value.includes(\"Youngmin\") ? \"No Youngmins allowed\" : true,\n              noPark: (value) =>\n                value.includes(\"Park\") ? \"No Parks allowed\" : true,\n            },\n          })}\n          placeholder=\"First Name\"\n        />\n        <span>{errors?.firstName?.message}</span>\n        <input\n          {...register(\"lastName\", { required: \"write here\" })}\n          placeholder=\"Last Name\"\n        />\n        <span>{errors?.lastName?.message}</span>\n        <input\n          {...register(\"username\", { required: \"write here\", minLength: 10 })}\n          placeholder=\"Username\"\n        />\n        <span>{errors?.username?.message}</span>\n          <input\n            {...register(\"password\", {\n              required: \"Password is required\",\n              minLength: 5,\n            })}\n            placeholder=\"Password\"\n          />\n          <span>{errors?.password?.message}</span>\n          <input\n            {...register(\"password1\", {\n              required: \"Password1 is required\",\n            })}\n            placeholder=\"Password1\"\n          />\n          <span>{errors?.password1?.message}</span>\n        <button>Add</button>\n        <span>{errors?.extraError?.message}</span>\n      </form>\n      <ul></ul>\n      <hr />\n    </div>\n  );\n}\nexport default ToDoList;\n","import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"./atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"./atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n}\nexport default ToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Categories, categoryState, toDoSelector } from \"./atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoListTwo() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoListTwo;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\nimport ToDoListTwo from \"./components/ToDoListTwo\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n*[hidden] {\n    display: none;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n      <ToDoListTwo />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"blanchedalmond\",\n  cardBgColor: \"transparent\",\n};\n\n"],"sourceRoot":""}